{
  "hash": "e08f184add493328447b38b3d8a64a8d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"assignment\"\nauthor: \"JEONGMIN OH\"\ndate: now\ncategories: [news]\n---\n\n## 과제 1\n\n::: {#9815e419 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"./bike_data.csv\")\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\n# 계절이 1일 때 대여량이 가장 많은 시간대 구하기\ndf['season'] == 1\ndf1 = df.loc[df['season'] == 1,:]\ndf1['hour'] = df1['datetime'].dt.hour\ndf2 = df1.groupby('hour')['count'].mean().reset_index()\nq1 = df2.loc[df2['count'].idxmax(),['hour','count']]\nf\"count가 가장 높은 시간대는 {q1['hour']}시이며 {q1['count']}회 입니다\"\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\ls\\AppData\\Local\\Temp\\ipykernel_12464\\4114978373.py:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df1['hour'] = df1['datetime'].dt.hour\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n'count가 가장 높은 시간대는 17.0시이며 346.3333333333333회 입니다'\n```\n:::\n:::\n\n\n### 계절별 평균 대여량 구하기\n\n::: {#22c7ca04 .cell execution_count=2}\n``` {.python .cell-code}\ndf.groupby('season')['count'].mean().reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>103.169811</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>218.803922</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>265.500000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>218.581197</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 특정 달 동안 총 대여량 구하기\n\n::: {#ff1d56c0 .cell execution_count=3}\n``` {.python .cell-code}\ndf['month'] = df['datetime'].dt.month\ndf.groupby('month')['count'].sum().reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>month</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2567</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>4849</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>3520</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>5911</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>10082</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>6325</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>8517</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>10480</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>10208</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>10574</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11</td>\n      <td>6631</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12</td>\n      <td>8369</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 가장 대여량이 많은 날짜\n\n::: {#84791b3e .cell execution_count=4}\n``` {.python .cell-code}\ndf['date'] = df['datetime'].dt.date\ndf.groupby('date')['count'].sum().idxmax()\ndf.groupby('date')['count'].sum().max()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n1398\n```\n:::\n:::\n\n\n### 시간대별 평균 대여량\n\n::: {#ca6be148 .cell execution_count=5}\n``` {.python .cell-code}\ndf['hour'] = df['datetime'].dt.hour\ndf.groupby('hour')['count'].mean().reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hour</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>43.500000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>52.714286</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>32.842105</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>12.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>6.687500</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>17.750000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>58.705882</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>7</td>\n      <td>208.937500</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>8</td>\n      <td>483.055556</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>9</td>\n      <td>260.117647</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>10</td>\n      <td>144.130435</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>11</td>\n      <td>182.000000</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>12</td>\n      <td>277.533333</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>13</td>\n      <td>290.600000</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>14</td>\n      <td>266.842105</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>15</td>\n      <td>255.666667</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>16</td>\n      <td>373.052632</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>17</td>\n      <td>519.200000</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>18</td>\n      <td>447.769231</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>19</td>\n      <td>322.103448</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>20</td>\n      <td>210.083333</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>21</td>\n      <td>196.619048</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>22</td>\n      <td>113.560000</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>23</td>\n      <td>77.352941</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 특정 요일(weekday) 동안의 총 대여량(count)\n\n::: {#cbbb9a24 .cell execution_count=6}\n``` {.python .cell-code}\ndf['요일'] = df['datetime'].dt.day_name()\nresult = df.groupby('요일')['count'].sum().reset_index()\nf'월요일동안 총 대여량은 {result.iloc[1,1]}입니다'\n\n# result['요일'] = result['요일'].astype('category')\n# result['요일'].array.categories = np.array(['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])\n# result['요일'] = result['요일'].cat.set_categories(\n#     ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n#     ordered=True  # 순서가 중요할 경우\n# )\n# result['요일'].sort_values()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'월요일동안 총 대여량은 10191입니다'\n```\n:::\n:::\n\n\n### 주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 긴 형식(long format)으로 변환하시오. casual과 registered 열을 하나의 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 데이터프레임을 만드시오.\n\n::: {#61a7c07d .cell execution_count=7}\n``` {.python .cell-code}\nmelted = df.melt(id_vars=('datetime','season'),\n                var_name='user_type',\n                value_vars=('casual','registered'),\n                value_name=('user_count')\n                ).sort_values('datetime')\nmelted\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>datetime</th>\n      <th>season</th>\n      <th>user_type</th>\n      <th>user_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>781</th>\n      <td>2011-01-01 05:00:00</td>\n      <td>1</td>\n      <td>registered</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>346</th>\n      <td>2011-01-01 05:00:00</td>\n      <td>1</td>\n      <td>casual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>231</th>\n      <td>2011-01-01 20:00:00</td>\n      <td>1</td>\n      <td>casual</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>666</th>\n      <td>2011-01-01 20:00:00</td>\n      <td>1</td>\n      <td>registered</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>838</th>\n      <td>2011-01-04 00:00:00</td>\n      <td>1</td>\n      <td>registered</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>661</th>\n      <td>2012-12-18 13:00:00</td>\n      <td>4</td>\n      <td>registered</td>\n      <td>235</td>\n    </tr>\n    <tr>\n      <th>464</th>\n      <td>2012-12-19 12:00:00</td>\n      <td>4</td>\n      <td>registered</td>\n      <td>203</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>2012-12-19 12:00:00</td>\n      <td>4</td>\n      <td>casual</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>831</th>\n      <td>2012-12-19 21:00:00</td>\n      <td>4</td>\n      <td>registered</td>\n      <td>164</td>\n    </tr>\n    <tr>\n      <th>396</th>\n      <td>2012-12-19 21:00:00</td>\n      <td>4</td>\n      <td>casual</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>870 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n### 이전에 생성한 긴 형식 데이터프레임을 활용하여 각 계절(season)별로 casual과 registered 사용자의 평균 대여 수(count)를 구하시오.\n\n::: {#922da515 .cell execution_count=8}\n``` {.python .cell-code}\nmelted.groupby(['season',\n                'user_type'])['user_count'].mean().reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>user_type</th>\n      <th>user_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>casual</td>\n      <td>14.122642</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>registered</td>\n      <td>89.047170</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>casual</td>\n      <td>48.990196</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>registered</td>\n      <td>169.813725</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>casual</td>\n      <td>55.127273</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>registered</td>\n      <td>210.372727</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>4</td>\n      <td>casual</td>\n      <td>29.709402</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>4</td>\n      <td>registered</td>\n      <td>188.871795</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 과제 2\n\n::: {#c4d1c01f .cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n# 앱 로그 데이터\npd.set_option('display.max_columns', None) # 전체 칼럼 정보 프린트 옵션\ndf = pd.read_csv('./logdata.csv')\nprint(df.head(2))\n\n# 로그 칼럼에서 연도 정보만 추출\ndf['로그'].str.extract(r'(\\d+)')\ndf['로그'].str.extract(r'(20[0-9]+)')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                  로그\n0  2024-07-18 12:34:56 User: 홍길동 Action: Login ID...\n1  2024-07-18 12:35:00 User: 김철수 Action: Purchase...\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>2024</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 모든 숫자정보 추출\n\n::: {#01df87b4 .cell execution_count=10}\n``` {.python .cell-code}\nmat1 = df['로그'].str.extractall(r'([0-9]+)').reset_index()\ndel mat1['match']\nmat1.groupby('level_0')[0].apply(lambda x: ' '.join(map(str, x)))\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nlevel_0\n0     2024 07 18 12 34 56 12345\n1      2024 07 18 12 35 00 2000\n2        2024 07 18 12 36 10 30\n3     2024 07 18 12 37 22 67890\n4      2024 07 18 12 38 44 1500\n5        2024 07 18 12 39 50 25\n6      2024 07 18 12 40 56 3500\n7     2024 07 18 12 41 00 23456\n8      2024 07 18 12 42 10 3000\n9        2024 07 18 12 43 22 45\n10    2024 07 18 12 44 44 78901\n11     2024 07 18 12 45 50 4000\n12       2024 07 18 12 46 56 35\n13     2024 07 18 12 47 00 2500\n14    2024 07 18 12 48 10 56789\n15     2024 07 18 12 49 22 4500\n16       2024 07 18 12 50 44 50\n17    2024 07 18 12 51 50 34567\n18     2024 07 18 12 52 56 5000\n19       2024 07 18 12 53 00 20\n20     2024 07 18 12 54 10 5500\n21    2024 07 18 12 55 22 12346\n22     2024 07 18 12 56 44 6000\n23       2024 07 18 12 57 50 55\n24    2024 07 18 12 58 56 67891\n25     2024 07 18 12 59 00 6500\n26       2024 07 18 13 00 10 40\n27     2024 07 18 13 01 22 7000\n28    2024 07 18 13 02 44 78902\n29     2024 07 18 13 03 50 7500\nName: 0, dtype: object\n```\n:::\n:::\n\n\n### 로그 칼럼에서 모든 시간 정보를 추출\n\n::: {#49ad6f9d .cell execution_count=11}\n``` {.python .cell-code}\ndf['로그'].str.extract(r'([0-9]{2}:[0-9]{2}:[0-9]{2})')\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12:34:56</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12:35:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12:36:10</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12:37:22</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12:38:44</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>12:39:50</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>12:40:56</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>12:41:00</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>12:42:10</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>12:43:22</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>12:44:44</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12:45:50</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>12:46:56</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>12:47:00</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>12:48:10</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>12:49:22</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>12:50:44</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>12:51:50</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>12:52:56</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>12:53:00</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>12:54:10</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>12:55:22</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>12:56:44</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>12:57:50</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>12:58:56</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>12:59:00</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>13:00:10</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>13:01:22</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>13:02:44</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>13:03:50</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 로그 칼럼에서 한글 정보만 추출\n\n::: {#c62bd53d .cell execution_count=12}\n``` {.python .cell-code}\ndf['로그'].str.extractall(r'([가-힣]+)')\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>0</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>match</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <th>0</th>\n      <td>홍길동</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <th>0</th>\n      <td>김철수</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <th>0</th>\n      <td>이영희</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <th>0</th>\n      <td>박지성</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <th>0</th>\n      <td>최강타</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <th>0</th>\n      <td>장보고</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <th>0</th>\n      <td>홍길동</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <th>0</th>\n      <td>김철수</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <th>0</th>\n      <td>이영희</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <th>0</th>\n      <td>박지성</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <th>0</th>\n      <td>최강타</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <th>0</th>\n      <td>장보고</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <th>0</th>\n      <td>홍길동</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <th>0</th>\n      <td>김철수</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <th>0</th>\n      <td>이영희</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <th>0</th>\n      <td>박지성</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <th>0</th>\n      <td>최강타</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <th>0</th>\n      <td>장보고</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <th>0</th>\n      <td>홍길동</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <th>0</th>\n      <td>김철수</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <th>0</th>\n      <td>이영희</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <th>0</th>\n      <td>박지성</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <th>0</th>\n      <td>최강타</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <th>0</th>\n      <td>장보고</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <th>0</th>\n      <td>홍길동</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <th>0</th>\n      <td>김철수</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <th>0</th>\n      <td>이영희</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <th>0</th>\n      <td>박지성</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <th>0</th>\n      <td>최강타</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <th>0</th>\n      <td>장보고</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 로그 칼럼에서 특수 문자를 제거\n\n::: {#6aae2535 .cell execution_count=13}\n``` {.python .cell-code}\ndf['로그'].str.replace(r'([^a-zA-Z0-9가-힣\\s])','',regex=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n0         20240718 123456 User 홍길동 Action Login ID12345\n1     20240718 123500 User 김철수 Action Purchase Amoun...\n2       20240718 123610 User 이영희 Action Logout Time 30s\n3         20240718 123722 User 박지성 Action Login ID67890\n4     20240718 123844 User 최강타 Action Purchase Amoun...\n5       20240718 123950 User 장보고 Action Logout Time 25s\n6     20240718 124056 User 홍길동 Action Purchase Amoun...\n7         20240718 124100 User 김철수 Action Login ID23456\n8     20240718 124210 User 이영희 Action Purchase Amoun...\n9       20240718 124322 User 박지성 Action Logout Time 45s\n10        20240718 124444 User 최강타 Action Login ID78901\n11    20240718 124550 User 장보고 Action Purchase Amoun...\n12      20240718 124656 User 홍길동 Action Logout Time 35s\n13    20240718 124700 User 김철수 Action Purchase Amoun...\n14        20240718 124810 User 이영희 Action Login ID56789\n15    20240718 124922 User 박지성 Action Purchase Amoun...\n16      20240718 125044 User 최강타 Action Logout Time 50s\n17        20240718 125150 User 장보고 Action Login ID34567\n18    20240718 125256 User 홍길동 Action Purchase Amoun...\n19      20240718 125300 User 김철수 Action Logout Time 20s\n20    20240718 125410 User 이영희 Action Purchase Amoun...\n21        20240718 125522 User 박지성 Action Login ID12346\n22    20240718 125644 User 최강타 Action Purchase Amoun...\n23      20240718 125750 User 장보고 Action Logout Time 55s\n24        20240718 125856 User 홍길동 Action Login ID67891\n25    20240718 125900 User 김철수 Action Purchase Amoun...\n26      20240718 130010 User 이영희 Action Logout Time 40s\n27    20240718 130122 User 박지성 Action Purchase Amoun...\n28        20240718 130244 User 최강타 Action Login ID78902\n29    20240718 130350 User 장보고 Action Purchase Amoun...\nName: 로그, dtype: object\n```\n:::\n:::\n\n\n### 로그 칼럼에서 유저, Amount 값을 추출한 후 각 유저별 Amount의 평균값을 계산하시오.\n\n::: {#3fe4ddf4 .cell execution_count=14}\n``` {.python .cell-code}\ndf1 = pd.DataFrame()\ndf1['amount'] = df['로그'].str.extract(r'Amount: ([0-9]+)')\ndf1['user'] = df['로그'].str.extract(r'User: ([가-힣]+)')\ndf2 = df1.dropna()\ndf2['amount'] = df2['amount'].astype('int64')\ndf2.groupby('user')['amount'].mean()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\ls\\AppData\\Local\\Temp\\ipykernel_12464\\774835434.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df2['amount'] = df2['amount'].astype('int64')\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nuser\n김철수    3666.666667\n박지성    5750.000000\n이영희    4250.000000\n장보고    5750.000000\n최강타    3750.000000\n홍길동    4250.000000\nName: amount, dtype: float64\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}