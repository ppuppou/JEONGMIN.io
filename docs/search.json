[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/intro/index.html",
    "href": "posts/intro/index.html",
    "title": "Intro",
    "section": "",
    "text": "나의 첫 블로그입니다. 잘부탁드려요"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ppuppou blog",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nassignment\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 23, 2025\n\n\nJEONGMIN OH\n\n\n\n\n\n\n\n\n\n\n\n\nIntro\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 23, 2025\n\n\nJEONGMIN OH\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog 2\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 22, 2025\n\n\nJEONGMIN OH\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\nnews\n\ncode\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 22, 2025\n\n\nHarlow Malloc\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "JEONGMIN OH",
    "section": "",
    "text": "오정민의 블로그입니다"
  },
  {
    "objectID": "posts/assignment/index.html",
    "href": "posts/assignment/index.html",
    "title": "assignment",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"./bike_data.csv\")\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\n# 계절이 1일 때 대여량이 가장 많은 시간대 구하기\ndf['season'] == 1\ndf1 = df.loc[df['season'] == 1,:]\ndf1['hour'] = df1['datetime'].dt.hour\ndf2 = df1.groupby('hour')['count'].mean().reset_index()\nq1 = df2.loc[df2['count'].idxmax(),['hour','count']]\nf\"count가 가장 높은 시간대는 {q1['hour']}시이며 {q1['count']}회 입니다\"\n\n# 계절별 평균 대여량 구하기\ndf.groupby('season')['count'].mean().reset_index()\n\n# 특정 달 동안 총 대여량 구하기\ndf['month'] = df['datetime'].dt.month\ndf.groupby('month')['count'].sum().reset_index()\n\n# 가장 대여량이 많은 날짜\ndf['date'] = df['datetime'].dt.date\ndf.groupby('date')['count'].sum().idxmax()\ndf.groupby('date')['count'].sum().max()\n\n# 시간대별 평균 대여량\ndf['hour'] = df['datetime'].dt.hour\ndf.groupby('hour')['count'].mean().reset_index()\n\n# 특정 요일(weekday) 동안의 총 대여량(count)\ndf['요일'] = df['datetime'].dt.day_name()\nresult = df.groupby('요일')['count'].sum().reset_index()\nf'월요일동안 총 대여량은 {result.iloc[1,1]}입니다'\n\nresult['요일'] = result['요일'].astype('category')\n# result['요일'].array.categories = np.array(['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])\nresult['요일'] = result['요일'].cat.set_categories(\n    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    ordered=True  # 순서가 중요할 경우\n)\nresult['요일'].sort_values()\n\n# 주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 \n# 긴 형식(long format)으로 변환하시오. casual과 registered 열을 하나의\n# 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 \n# 데이터프레임을 만드시오.\nmelted = df.melt(id_vars=('datetime','season'),\n                var_name='user_type',\n                value_vars=('casual','registered'),\n                value_name=('user_count')\n                ).sort_values('datetime')\n# 이전에 생성한 긴 형식 데이터프레임을 활용하여 각 계절(season)별로 \n# casual과 registered 사용자의 평균 대여 수(count)를 구하시오.\nmelted.groupby(['season','user_type'])['user_count'].mean().reset_index()\n\nC:\\Users\\ls\\AppData\\Local\\Temp\\ipykernel_7240\\3263512430.py:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df1['hour'] = df1['datetime'].dt.hour\n\n\n\n\n\n\n\n\n\nseason\nuser_type\nuser_count\n\n\n\n\n0\n1\ncasual\n14.122642\n\n\n1\n1\nregistered\n89.047170\n\n\n2\n2\ncasual\n48.990196\n\n\n3\n2\nregistered\n169.813725\n\n\n4\n3\ncasual\n55.127273\n\n\n5\n3\nregistered\n210.372727\n\n\n6\n4\ncasual\n29.709402\n\n\n7\n4\nregistered\n188.871795"
  },
  {
    "objectID": "posts/assignment/index.html#과제-1",
    "href": "posts/assignment/index.html#과제-1",
    "title": "assignment",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"./bike_data.csv\")\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\n# 계절이 1일 때 대여량이 가장 많은 시간대 구하기\ndf['season'] == 1\ndf1 = df.loc[df['season'] == 1,:]\ndf1['hour'] = df1['datetime'].dt.hour\ndf2 = df1.groupby('hour')['count'].mean().reset_index()\nq1 = df2.loc[df2['count'].idxmax(),['hour','count']]\nf\"count가 가장 높은 시간대는 {q1['hour']}시이며 {q1['count']}회 입니다\"\n\n# 계절별 평균 대여량 구하기\ndf.groupby('season')['count'].mean().reset_index()\n\n# 특정 달 동안 총 대여량 구하기\ndf['month'] = df['datetime'].dt.month\ndf.groupby('month')['count'].sum().reset_index()\n\n# 가장 대여량이 많은 날짜\ndf['date'] = df['datetime'].dt.date\ndf.groupby('date')['count'].sum().idxmax()\ndf.groupby('date')['count'].sum().max()\n\n# 시간대별 평균 대여량\ndf['hour'] = df['datetime'].dt.hour\ndf.groupby('hour')['count'].mean().reset_index()\n\n# 특정 요일(weekday) 동안의 총 대여량(count)\ndf['요일'] = df['datetime'].dt.day_name()\nresult = df.groupby('요일')['count'].sum().reset_index()\nf'월요일동안 총 대여량은 {result.iloc[1,1]}입니다'\n\nresult['요일'] = result['요일'].astype('category')\n# result['요일'].array.categories = np.array(['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])\nresult['요일'] = result['요일'].cat.set_categories(\n    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    ordered=True  # 순서가 중요할 경우\n)\nresult['요일'].sort_values()\n\n# 주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 \n# 긴 형식(long format)으로 변환하시오. casual과 registered 열을 하나의\n# 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 \n# 데이터프레임을 만드시오.\nmelted = df.melt(id_vars=('datetime','season'),\n                var_name='user_type',\n                value_vars=('casual','registered'),\n                value_name=('user_count')\n                ).sort_values('datetime')\n# 이전에 생성한 긴 형식 데이터프레임을 활용하여 각 계절(season)별로 \n# casual과 registered 사용자의 평균 대여 수(count)를 구하시오.\nmelted.groupby(['season','user_type'])['user_count'].mean().reset_index()\n\nC:\\Users\\ls\\AppData\\Local\\Temp\\ipykernel_7240\\3263512430.py:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df1['hour'] = df1['datetime'].dt.hour\n\n\n\n\n\n\n\n\n\nseason\nuser_type\nuser_count\n\n\n\n\n0\n1\ncasual\n14.122642\n\n\n1\n1\nregistered\n89.047170\n\n\n2\n2\ncasual\n48.990196\n\n\n3\n2\nregistered\n169.813725\n\n\n4\n3\ncasual\n55.127273\n\n\n5\n3\nregistered\n210.372727\n\n\n6\n4\ncasual\n29.709402\n\n\n7\n4\nregistered\n188.871795"
  },
  {
    "objectID": "posts/assignment/index.html#과제-2",
    "href": "posts/assignment/index.html#과제-2",
    "title": "assignment",
    "section": "과제 2",
    "text": "과제 2\n\nimport pandas as pd\nimport numpy as np\n\n# 앱 로그 데이터\npd.set_option('display.max_columns', None) # 전체 칼럼 정보 프린트 옵션\ndf = pd.read_csv('./logdata.csv')\nprint(df.head(2))\n\n# 로그 칼럼에서 연도 정보만 추출\ndf['로그'].str.extract(r'(\\d+)')\ndf['로그'].str.extract(r'(20[0-9]+)')\n\n# 모든 숫자정보 추출\nmat1 = df['로그'].str.extractall(r'([0-9]+)').reset_index()\ndel mat1['match']\nmat1.groupby('level_0')[0].apply(lambda x: ' '.join(map(str, x)))\n\n# 로그 칼럼에서 모든 시간 정보를 추출\ndf['로그'].str.extract(r'([0-9]{2}:[0-9]{2}:[0-9]{2})')\n\n# 로그 칼럼에서 한글 정보만 추출\ndf['로그'].str.extractall(r'([가-힣]+)')\n\n# 로그 칼럼에서 특수 문자를 제거\ndf['로그'].str.replace(r'([^a-zA-Z0-9가-힣\\s])','',regex=True)\n\n# 로그 칼럼에서 유저, Amount 값을 추출한 후 각 유저별 Amount의 평균값을 계산하시오.\ndf1 = pd.DataFrame()\ndf1['amount'] = df['로그'].str.extract(r'Amount: ([0-9]+)')\ndf1['user'] = df['로그'].str.extract(r'User: ([가-힣]+)')\ndf2 = df1.dropna()\ndf2['amount'] = df2['amount'].astype('int64')\ndf2.groupby('user')['amount'].mean()\n\n                                                  로그\n0  2024-07-18 12:34:56 User: 홍길동 Action: Login ID...\n1  2024-07-18 12:35:00 User: 김철수 Action: Purchase...\n\n\nC:\\Users\\ls\\AppData\\Local\\Temp\\ipykernel_7240\\3969075094.py:32: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df2['amount'] = df2['amount'].astype('int64')\n\n\nuser\n김철수    3666.666667\n박지성    5750.000000\n이영희    4250.000000\n장보고    5750.000000\n최강타    3750.000000\n홍길동    4250.000000\nName: amount, dtype: float64"
  },
  {
    "objectID": "posts/pandas_practice/index.html",
    "href": "posts/pandas_practice/index.html",
    "title": "Welcome To My Blog 2",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\n안녕하세요 !"
  }
]